Steps for Implementing Trinity on Cluster:
------------------------------------------

Trinity is a novel method for the efficient and robust de novo reconstruction of transcriptomes from RNA-seq data. Trinity combines three independent software modules: Inchworm, Chrysalis, and Butterfly, applied sequentially to process large volumes of RNA-seq reads. Trinity partitions the sequence data into many individual de Bruijn graphs, each representing the transcriptional complexity at at a given gene or locus, and then processes each graph independently to extract full-length splicing isoforms and to tease apart transcripts derived from paralogous genes.

More information on its implentation can be found at "http://trinityrnaseq.sourceforge.net/";


Considering, memory and waiting time for job sumission on cluster (using lsf), It is advised to run Trinity in a sequenctial step-wise manner rather as a wrapper, which takes require huge memory and time. (Sometimes, you may end up runnnig it for 3-4 weeks if you are dealing with more no of reads!!!). Step-wise manner implementation is useful to have a check on resources, before implementation of next task. 

The programs included in this directory are used to create jobs submission files for individual steps of Trinity with all the lsf job rquirements.

Trinity is implemented as 5 steps:

 1) Pre-Inchorm Step:
 --------------------
  
     Input sequences are converted into fastA (if fastQ are provided), following strand specific library protocol provided (FR/RF/F/R) and later concatenated.
  
     Program : run_preInchworm.pl (run without any options for help on parameters).
 
 2) Inchworm Step:
 -----------------
    
     Reads are chunked into k-mers, generating all possible full-length transcripts for a dominant isoform.

     Program : run_Inchworm.pl (run without any options for help on parameters).

 3) Chrysalis Step:
 ------------------

     clusters the Inchworm contigs into clusters and constructs complete de Bruijn graphs for each cluster.

     Program: run_Chrysalis.pl (run without any options for help on parameters).
 
 4) QuantifyGraph Step:
 ----------------------

    As this step can be run in atmost parralel way, as inputs and outputs are completely different. we make use of ParaFly program, included in Trinity for submitting in parallel.
   Initially, quantifygraph_commands file is splitted into no of files with definate no of command in it.

   Program : split_Commands.pl is used for splitting qunatifygraph_commands file into no of chunk files. As the same programs are also used for butterfly, the basename is indicated as QG (indicating QuantifyGraph).
  
   Later Program : submit_Commands.pl is used to create job specific files for all chunk files respectively.

 5) Butterfly Step:
 ------------------

   Similar to QuantifyGraph Step, butterfly_commands are chunked and submitted in parallel using same programs and basename ad BF (indicating butterfly).
 

